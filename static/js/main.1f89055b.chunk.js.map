{"version":3,"sources":["../external \"Cesium\"","utils/getPosition.js","utils/calculatePositions.js","utils/getPoints.js","components/Entity/index.js","components/Loading/style.js","components/Loading/index.js","components/ListOfEntities/index.js","hooks/useElements.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Cesium","getPosition","tle_l1","tle_l2","jsDate","satrec","satellite","positionEci","position","gmst","positionGd","longitudeRad","longitude","latitudeRad","latitude","height","calculatePositions","a","totalSeconds","timestepInSeconds","start","tl1","tl2","positionsOverTime","SampledPositionProperty","i","time","JulianDate","addSeconds","toDate","res","Cartesian3","fromDegrees","queueMicrotask","addSample","getPoints","limit","fetch","headers","Accept","then","response","json","slice","console","log","EntityComponent","name","description","point","pixelSize","color","Color","PURPLE","React","memo","Div","styled","div","Iframe","iframe","Loading","button","src","frameborder","allowfullscreen","ListOfEntities","props","useState","positions","setPositions","isLoading","setIsLoading","useEffect","rawData","element","id","newData","data","concat","useElements","autoPlay","map","Entity","App","fromDate","Date","stop","geocoder","full","enableLighting","startTime","currentTime","stopTime","clockRange","ClockRange","LOOP_STOP","clockStep","ClockStep","SYSTEM_CLOCK_MULTIPLIER","multiplier","shouldAnimate","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Ion","defaultAccessToken","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f89055b.chunk.js","sourcesContent":["module.exports = Cesium;","import * as satellite from \"satellite.js\";\n\nconst getPosition = (tle_l1, tle_l2, jsDate) => {\n  const satrec = satellite.twoline2satrec(tle_l1, tle_l2);\n  const positionAndVelocity = satellite.propagate(satrec, jsDate);\n  const positionEci = positionAndVelocity.position;\n  // var velocityEci = positionAndVelocity.velocity;\n  // var observerGd = {\n  //   longitude: satellite.degreesToRadians(-122.0308),\n  //   latitude: satellite.degreesToRadians(36.9613422),\n  //   height: 0.37,\n  // };\n  const gmst = satellite.gstime(jsDate);\n\n  // var positionEcf = satellite.eciToEcf(positionEci, gmst);\n  // var lookAngles = satellite.ecfToLookAngles(observerGd, positionEcf);\n  const positionGd = satellite.eciToGeodetic(positionEci, gmst);\n  const longitudeRad = positionGd.longitude;\n  const latitudeRad = positionGd.latitude;\n  // heightRad = positionGd.height;\n\n  return {\n    longitude: satellite.degreesLong(longitudeRad),\n    latitude: satellite.degreesLat(latitudeRad),\n    height: positionGd.height * 1000,\n  };\n};\n\nexport default getPosition;\n","import getPosition from \"./getPosition\";\nimport { Cartesian3, JulianDate, SampledPositionProperty } from \"cesium\";\n\nconst calculatePositions = async ({ totalSeconds, timestepInSeconds, start, tl1, tl2 }) => {\n  try {\n    const positionsOverTime = new SampledPositionProperty();\n    for (let i = 0; i < totalSeconds; i += timestepInSeconds) {\n      const time = JulianDate.addSeconds(start, i, new JulianDate());\n      const jsDate = JulianDate.toDate(time);\n      const res = getPosition(tl1, tl2, jsDate);\n      const position = Cartesian3.fromDegrees(\n        res.longitude,\n        res.latitude,\n        res.height\n      );\n      await queueMicrotask(() => positionsOverTime.addSample(time, position));\n    }\n    return positionsOverTime;\n  } catch (e) {\n    // console.error(e);\n  }\n}\n\n\n\n\nexport default calculatePositions;\n","const getPoints = async (limit = 0) => {\n  let response = await fetch(\"data/data.json\", {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n  })\n    .then((response) => response.json())\n    .then((res) => {\n      if (limit) res = res.slice(0, limit)\n      console.log(res)\n      return res\n    })\n\n\n  return response;\n};\n\nexport default getPoints;\n","import React from 'react'\nimport { Color } from \"cesium\";\nimport { Entity } from \"resium\";\n\nconst EntityComponent = ({ name, position, description }) => {\n  return (\n    <Entity\n      name={name}\n      description={description}\n      position={position}\n      point={{ pixelSize: 5, color: Color.PURPLE }}\n    ></Entity>\n  );\n};\n\nexport default React.memo(EntityComponent);\n","import styled from \"styled-components\";\n\nexport const Div = styled.div`\n  background-color: #5555ff99;\n  width: 60%;\n  max-width: 1000px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: white;\n  padding: 1rem;\n  z-index: 1000;\n`;\n\nexport const Iframe = styled.iframe`\n  display: block;\n  margin: 0px auto;\n  border: none;\n  width: 100%;\n  height: 50vh;\n`;\n\nexport const Button = styled.button`\n  width: 100%;\n  background-color: #9c4538;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  font-size: 2rem;\n  padding: 0.5rem 1rem;\n  cursor: pointer;\n  transition: 200ms ease;\n  &:hover {\n    background-color: #5c2921;\n  }\n`;\n","import { Div, Iframe } from \"./style\";\nconst Loading = () => {\n  return (\n    <Div>\n      <h1>Mapping Space Trash in Real Time</h1>\n\n      <main>\n        <Iframe src=\"loader.html\" frameborder=\"0\" allowfullscreen></Iframe>\n      </main>\n    </Div>\n  );\n};\n\nexport default Loading;\n","import useElements from \"../../hooks/useElements\";\nimport Entity from \"../Entity\";\nimport Loading from \"../Loading\";\n\nconst ListOfEntities = (props) => {\n  const { positions, isLoading } = useElements(props);\n  if (isLoading) {\n    return <Loading isLoading={isLoading} />;\n  }\n\n  return (\n    <div>\n      {/* <iframe\n        src=\"interestelar.mp3\"\n        className=\"invisible\"\n        title=\"YouTube video player\"\n        frameborder=\"0\"\n      ></iframe> */}\n      <audio autoPlay>\n        <source src=\"/interestellar.mp3\" />\n      </audio>\n      {positions.map(({ id, name, position, description }) => (\n        <Entity\n          name={name}\n          position={position}\n          description={description}\n          key={id}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default ListOfEntities;\n","import { useState, useEffect } from \"react\";\nimport calculatePositions from \"../utils/calculatePositions\";\nimport getPoints from \"../utils/getPoints\";\n\nexport default function useElements({ start, timestepInSeconds, totalSeconds }) {\n  const [positions, setPositions] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  // const [limit, setLimit] = useState(0);\n\n  useEffect(() => {\n    setIsLoading(true);\n    (async () => {\n      let rawData = await getPoints(10000);\n      for (const element of rawData) {\n        const [id, name, tl1, tl2, description] = element\n        const res = await calculatePositions({ tl1, tl2, start, timestepInSeconds, totalSeconds })\n        // console.log(res)\n        const newData = {\n          id,\n          name,\n          description,\n          position: res\n        }\n\n        setPositions(data => data.concat(newData))\n        setIsLoading(false);\n      }\n\n    })();\n    // let newData = await rawData.map(([id, name, tl1, tl2, description]) => {\n    //   const res = calculatePositions({ tl1, tl2, ...props });\n    //   return {\n    //     id,\n    //     description,\n    //     name,\n    //     position: res,\n    //   };\n    // });\n  }, [start, timestepInSeconds, totalSeconds]);\n\n  return { positions, isLoading }\n}","import React from \"react\";\nimport { JulianDate, ClockRange, ClockStep } from \"cesium\";\nimport { Viewer, Clock, Globe } from \"resium\";\nimport ListOfEntities from \"./components/ListOfEntities\";\n\nexport default function App() {\n  const start = JulianDate.fromDate(new Date());\n  const totalSeconds = 60 * 30;\n  const stop = JulianDate.addSeconds(start, totalSeconds, new JulianDate());\n  const timestepInSeconds = 90;\n\n  return (\n    <Viewer geocoder={false} full>\n      <Globe enableLighting={true} />\n      <Clock\n        startTime={start}\n        currentTime={start}\n        stopTime={stop}\n        clockRange={ClockRange.LOOP_STOP} // loop when we hit the end time\n        clockStep={ClockStep.SYSTEM_CLOCK_MULTIPLIER}\n        multiplier={1} // how much time to advance each tick\n        shouldAnimate={true} // Animation on by default\n      />\n      <ListOfEntities\n        start={start}\n        timestepInSeconds={timestepInSeconds}\n        totalSeconds={totalSeconds}\n      />\n    </Viewer>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Ion } from \"cesium\";\n\nIon.defaultAccessToken =\n  \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiIzMjRjZWU3MC0zODM5LTRiZTYtOWIyNi02OGIwNzBiYWUwNzAiLCJpZCI6NjkxNDAsImlhdCI6MTYzMzIxMzMwOH0.5SzYVr3yOJY70CueWRzwwsVoEoGZKqo_bA5Wgpqjvmc\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}